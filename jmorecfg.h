/*
 * jmorecfg.h
 *
 * This file was part of the Independent JPEG Group's software:
 * Copyright (C) 1991-1997, Thomas G. Lane.
 * Modified 1997-2009 by Guido Vollbeding.
 * libjpeg-turbo Modifications:
 * Copyright (C) 2009, 2011, 2014-2015, 2018, 2020, D. R. Commander.
 * For conditions of distribution and use, see the accompanying README.ijg
 * file.
 *
 * This file contains additional configuration options that customize the
 * JPEG software for special applications or support machine-dependent
 * optimizations.  Most users will not need to touch this file.
 */

#if BITS_IN_JSAMPLE == 12 && SUFFIX_LIBJPEG12_SYMBOLS == 1
/* This section has been generated by rename_symbols_12.sh. *DO NOT EDIT MANUALLY !* */
#define access_virt_barray access_virt_barray_12
#define access_virt_sarray access_virt_sarray_12
#define alloc_barray alloc_barray_12
#define alloc_large alloc_large_12
#define alloc_sarray alloc_sarray_12
#define alloc_small alloc_small_12
#define build_ycc_rgb_table build_ycc_rgb_table_12
#define cmyk_ycck_convert cmyk_ycck_convert_12
#define color_quantize color_quantize_12
#define color_quantize3 color_quantize3_12
#define compress_data compress_data_12
#define compress_first_pass compress_first_pass_12
#define compress_output compress_output_12
#define compress_output compress_output_12
#define consume_data consume_data_12
#define consume_markers consume_markers_12
#define convsamp convsamp_12
#define convsamp_float convsamp_float_12
#define create_colorindex create_colorindex_12
#define decode_mcu decode_mcu_12
#define decode_mcu_AC_first decode_mcu_AC_first_12
#define decode_mcu_AC_refine decode_mcu_AC_refine_12
#define decode_mcu_DC_first decode_mcu_DC_first_12
#define decode_mcu_DC_refine decode_mcu_DC_refine_12
#define decompress_data decompress_data_12
#define decompress_onepass decompress_onepass_12
#define decompress_smooth_data decompress_smooth_data_12
#define dummy_consume_data dummy_consume_data_12
#define emit_bits emit_bits_12
#define emit_dht emit_dht_12
#define emit_dqt emit_dqt_12
#define emit_eobrun emit_eobrun_12
#define emit_message emit_message_12
#define emit_restart emit_restart_12
#define emit_sof emit_sof_12
#define empty_mem_output_buffer empty_mem_output_buffer_12
#define empty_output_buffer empty_output_buffer_12
#define encode_mcu_AC_first encode_mcu_AC_first_12
#define encode_mcu_AC_first_prepare encode_mcu_AC_first_prepare_12
#define encode_mcu_AC_refine encode_mcu_AC_refine_12
#define encode_mcu_AC_refine_prepare encode_mcu_AC_refine_prepare_12
#define encode_mcu_DC_first encode_mcu_DC_first_12
#define encode_mcu_DC_refine encode_mcu_DC_refine_12
#define encode_mcu_gather encode_mcu_gather_12
#define encode_mcu_huff encode_mcu_huff_12
#define error_exit error_exit_12
#define examine_app0 examine_app0_12
#define examine_app14 examine_app14_12
#define fill_input_buffer fill_input_buffer_12
#define fill_inverse_cmap fill_inverse_cmap_12
#define fill_mem_input_buffer fill_mem_input_buffer_12
#define finish_input_pass finish_input_pass_12
#define finish_output_pass finish_output_pass_12
#define finish_pass1 finish_pass1_12
#define finish_pass_1_quant finish_pass_1_quant_12
#define finish_pass2 finish_pass2_12
#define finish_pass_gather finish_pass_gather_12
#define finish_pass_gather_phuff finish_pass_gather_phuff_12
#define finish_pass_huff finish_pass_huff_12
#define finish_pass_master finish_pass_master_12
#define finish_pass_phuff finish_pass_phuff_12
#define flush_bits flush_bits_12
#define format_message format_message_12
#define forward_DCT forward_DCT_12
#define forward_DCT_float forward_DCT_float_12
#define frame_dummy frame_dummy_12
#define free_pool free_pool_12
#define fullsize_downsample fullsize_downsample_12
#define fullsize_smooth_downsample fullsize_smooth_downsample_12
#define fullsize_upsample fullsize_upsample_12
#define get_dht get_dht_12
#define get_interesting_appn get_interesting_appn_12
#define get_sof get_sof_12
#define gray_rgb565_convert gray_rgb565_convert_12
#define gray_rgb565D_convert gray_rgb565D_convert_12
#define gray_rgb_convert gray_rgb_convert_12
#define grayscale_convert grayscale_convert_12
#define grayscale_convert grayscale_convert_12
#define h1v2_fancy_upsample h1v2_fancy_upsample_12
#define h2v1_downsample h2v1_downsample_12
#define h2v1_fancy_upsample h2v1_fancy_upsample_12
#define h2v1_merged_upsample h2v1_merged_upsample_12
#define h2v1_merged_upsample_565 h2v1_merged_upsample_565_12
#define h2v1_merged_upsample_565D h2v1_merged_upsample_565D_12
#define h2v1_upsample h2v1_upsample_12
#define h2v2_downsample h2v2_downsample_12
#define h2v2_fancy_upsample h2v2_fancy_upsample_12
#define h2v2_merged_upsample h2v2_merged_upsample_12
#define h2v2_merged_upsample_565 h2v2_merged_upsample_565_12
#define h2v2_merged_upsample_565D h2v2_merged_upsample_565D_12
#define h2v2_smooth_downsample h2v2_smooth_downsample_12
#define h2v2_upsample h2v2_upsample_12
#define init_destination init_destination_12
#define init_error_limit init_error_limit_12
#define init_mem_destination init_mem_destination_12
#define init_mem_source init_mem_source_12
#define init_source init_source_12
#define int_downsample int_downsample_12
#define int_upsample int_upsample_12
#define jcopy_block_row jcopy_block_row_12
#define jcopy_sample_rows jcopy_sample_rows_12
#define jdiv_round_up jdiv_round_up_12
#define jinit_1pass_quantizer jinit_1pass_quantizer_12
#define jinit_2pass_quantizer jinit_2pass_quantizer_12
#define jinit_c_coef_controller jinit_c_coef_controller_12
#define jinit_c_main_controller jinit_c_main_controller_12
#define jinit_c_master_control jinit_c_master_control_12
#define jinit_color_converter jinit_color_converter_12
#define jinit_color_deconverter jinit_color_deconverter_12
#define jinit_compress_master jinit_compress_master_12
#define jinit_c_prep_controller jinit_c_prep_controller_12
#define jinit_d_coef_controller jinit_d_coef_controller_12
#define jinit_d_main_controller jinit_d_main_controller_12
#define jinit_downsampler jinit_downsampler_12
#define jinit_d_post_controller jinit_d_post_controller_12
#define jinit_forward_dct jinit_forward_dct_12
#define jinit_huff_decoder jinit_huff_decoder_12
#define jinit_huff_encoder jinit_huff_encoder_12
#define jinit_input_controller jinit_input_controller_12
#define jinit_inverse_dct jinit_inverse_dct_12
#define jinit_marker_reader jinit_marker_reader_12
#define jinit_marker_writer jinit_marker_writer_12
#define jinit_master_decompress jinit_master_decompress_12
#define jinit_memory_mgr jinit_memory_mgr_12
#define jinit_merged_upsampler jinit_merged_upsampler_12
#define jinit_phuff_decoder jinit_phuff_decoder_12
#define jinit_phuff_encoder jinit_phuff_encoder_12
#define jinit_upsampler jinit_upsampler_12
#define jpeg_abort jpeg_abort_12
#define jpeg_abort_compress jpeg_abort_compress_12
#define jpeg_abort_decompress jpeg_abort_decompress_12
#define jpeg_add_quant_table jpeg_add_quant_table_12
#define jpeg_alloc_huff_table jpeg_alloc_huff_table_12
#define jpeg_alloc_quant_table jpeg_alloc_quant_table_12
#define jpeg_calc_output_dimensions jpeg_calc_output_dimensions_12
#define jpeg_consume_input jpeg_consume_input_12
#define jpeg_copy_critical_parameters jpeg_copy_critical_parameters_12
#define jpeg_CreateCompress jpeg_CreateCompress_12
#define jpeg_CreateDecompress jpeg_CreateDecompress_12
#define jpeg_crop_scanline jpeg_crop_scanline_12
#define jpeg_default_colorspace jpeg_default_colorspace_12
#define jpeg_destroy jpeg_destroy_12
#define jpeg_destroy_compress jpeg_destroy_compress_12
#define jpeg_destroy_decompress jpeg_destroy_decompress_12
#define jpeg_fdct_float jpeg_fdct_float_12
#define jpeg_fdct_ifast jpeg_fdct_ifast_12
#define jpeg_fdct_islow jpeg_fdct_islow_12
#define jpeg_fill_bit_buffer jpeg_fill_bit_buffer_12
#define jpeg_free_large jpeg_free_large_12
#define jpeg_free_small jpeg_free_small_12
#define jpeg_gen_optimal_table jpeg_gen_optimal_table_12
#define jpeg_get_large jpeg_get_large_12
#define jpeg_get_small jpeg_get_small_12
#define jpeg_has_multiple_scans jpeg_has_multiple_scans_12
#define jpeg_huff_decode jpeg_huff_decode_12
#define jpeg_idct_10x10 jpeg_idct_10x10_12
#define jpeg_idct_11x11 jpeg_idct_11x11_12
#define jpeg_idct_12x12 jpeg_idct_12x12_12
#define jpeg_idct_13x13 jpeg_idct_13x13_12
#define jpeg_idct_14x14 jpeg_idct_14x14_12
#define jpeg_idct_15x15 jpeg_idct_15x15_12
#define jpeg_idct_16x16 jpeg_idct_16x16_12
#define jpeg_idct_1x1 jpeg_idct_1x1_12
#define jpeg_idct_2x2 jpeg_idct_2x2_12
#define jpeg_idct_3x3 jpeg_idct_3x3_12
#define jpeg_idct_4x4 jpeg_idct_4x4_12
#define jpeg_idct_5x5 jpeg_idct_5x5_12
#define jpeg_idct_6x6 jpeg_idct_6x6_12
#define jpeg_idct_7x7 jpeg_idct_7x7_12
#define jpeg_idct_9x9 jpeg_idct_9x9_12
#define jpeg_idct_float jpeg_idct_float_12
#define jpeg_idct_ifast jpeg_idct_ifast_12
#define jpeg_idct_islow jpeg_idct_islow_12
#define jpeg_input_complete jpeg_input_complete_12
#define jpeg_make_c_derived_tbl jpeg_make_c_derived_tbl_12
#define jpeg_make_d_derived_tbl jpeg_make_d_derived_tbl_12
#define jpeg_mem_available jpeg_mem_available_12
#define jpeg_mem_dest jpeg_mem_dest_12
#define jpeg_mem_src jpeg_mem_src_12
#define jpeg_mem_term jpeg_mem_term_12
#define jpeg_new_colormap jpeg_new_colormap_12
#define jpeg_open_backing_store jpeg_open_backing_store_12
#define jpeg_quality_scaling jpeg_quality_scaling_12
#define jpeg_read_coefficients jpeg_read_coefficients_12
#define jpeg_read_header jpeg_read_header_12
#define jpeg_read_icc_profile jpeg_read_icc_profile_12
#define jpeg_read_raw_data jpeg_read_raw_data_12
#define jpeg_read_scanlines jpeg_read_scanlines_12
#define jpeg_resync_to_restart jpeg_resync_to_restart_12
#define jpeg_save_markers jpeg_save_markers_12
#define jpeg_set_colorspace jpeg_set_colorspace_12
#define jpeg_set_defaults jpeg_set_defaults_12
#define jpeg_set_linear_quality jpeg_set_linear_quality_12
#define jpeg_set_marker_processor jpeg_set_marker_processor_12
#define jpeg_set_quality jpeg_set_quality_12
#define jpeg_simple_progression jpeg_simple_progression_12
#define jpeg_skip_scanlines jpeg_skip_scanlines_12
#define jpeg_start_compress jpeg_start_compress_12
#define jpeg_start_decompress jpeg_start_decompress_12
#define jpeg_start_output jpeg_start_output_12
#define jpeg_std_error jpeg_std_error_12
#define jpeg_stdio_dest jpeg_stdio_dest_12
#define jpeg_stdio_src jpeg_stdio_src_12
#define jpeg_suppress_tables jpeg_suppress_tables_12
#define jpeg_write_coefficients jpeg_write_coefficients_12
#define jpeg_write_icc_profile jpeg_write_icc_profile_12
#define jpeg_write_marker jpeg_write_marker_12
#define jpeg_write_m_byte jpeg_write_m_byte_12
#define jpeg_write_m_header jpeg_write_m_header_12
#define jpeg_write_raw_data jpeg_write_raw_data_12
#define jpeg_write_scanlines jpeg_write_scanlines_12
#define jpeg_write_tables jpeg_write_tables_12
#define jround_up jround_up_12
#define jsimd_can_convsamp jsimd_can_convsamp_12
#define jsimd_can_convsamp_float jsimd_can_convsamp_float_12
#define jsimd_can_encode_mcu_AC_first_prepare jsimd_can_encode_mcu_AC_first_prepare_12
#define jsimd_can_encode_mcu_AC_refine_prepare jsimd_can_encode_mcu_AC_refine_prepare_12
#define jsimd_can_fdct_float jsimd_can_fdct_float_12
#define jsimd_can_fdct_ifast jsimd_can_fdct_ifast_12
#define jsimd_can_fdct_islow jsimd_can_fdct_islow_12
#define jsimd_can_h1v2_fancy_upsample jsimd_can_h1v2_fancy_upsample_12
#define jsimd_can_h2v1_downsample jsimd_can_h2v1_downsample_12
#define jsimd_can_h2v1_fancy_upsample jsimd_can_h2v1_fancy_upsample_12
#define jsimd_can_h2v1_merged_upsample jsimd_can_h2v1_merged_upsample_12
#define jsimd_can_h2v1_upsample jsimd_can_h2v1_upsample_12
#define jsimd_can_h2v2_downsample jsimd_can_h2v2_downsample_12
#define jsimd_can_h2v2_fancy_upsample jsimd_can_h2v2_fancy_upsample_12
#define jsimd_can_h2v2_merged_upsample jsimd_can_h2v2_merged_upsample_12
#define jsimd_can_h2v2_smooth_downsample jsimd_can_h2v2_smooth_downsample_12
#define jsimd_can_h2v2_upsample jsimd_can_h2v2_upsample_12
#define jsimd_can_huff_encode_one_block jsimd_can_huff_encode_one_block_12
#define jsimd_can_idct_12x12 jsimd_can_idct_12x12_12
#define jsimd_can_idct_2x2 jsimd_can_idct_2x2_12
#define jsimd_can_idct_4x4 jsimd_can_idct_4x4_12
#define jsimd_can_idct_6x6 jsimd_can_idct_6x6_12
#define jsimd_can_idct_float jsimd_can_idct_float_12
#define jsimd_can_idct_ifast jsimd_can_idct_ifast_12
#define jsimd_can_idct_islow jsimd_can_idct_islow_12
#define jsimd_can_int_upsample jsimd_can_int_upsample_12
#define jsimd_can_quantize jsimd_can_quantize_12
#define jsimd_can_quantize_float jsimd_can_quantize_float_12
#define jsimd_can_rgb_gray jsimd_can_rgb_gray_12
#define jsimd_can_rgb_ycc jsimd_can_rgb_ycc_12
#define jsimd_can_ycc_rgb jsimd_can_ycc_rgb_12
#define jsimd_can_ycc_rgb565 jsimd_can_ycc_rgb565_12
#define jsimd_c_can_null_convert jsimd_c_can_null_convert_12
#define jsimd_c_null_convert jsimd_c_null_convert_12
#define jsimd_convsamp jsimd_convsamp_12
#define jsimd_convsamp_float jsimd_convsamp_float_12
#define jsimd_encode_mcu_AC_first_prepare jsimd_encode_mcu_AC_first_prepare_12
#define jsimd_encode_mcu_AC_refine_prepare jsimd_encode_mcu_AC_refine_prepare_12
#define jsimd_fdct_float jsimd_fdct_float_12
#define jsimd_fdct_ifast jsimd_fdct_ifast_12
#define jsimd_fdct_islow jsimd_fdct_islow_12
#define jsimd_h1v2_fancy_upsample jsimd_h1v2_fancy_upsample_12
#define jsimd_h2v1_downsample jsimd_h2v1_downsample_12
#define jsimd_h2v1_fancy_upsample jsimd_h2v1_fancy_upsample_12
#define jsimd_h2v1_merged_upsample jsimd_h2v1_merged_upsample_12
#define jsimd_h2v1_upsample jsimd_h2v1_upsample_12
#define jsimd_h2v2_downsample jsimd_h2v2_downsample_12
#define jsimd_h2v2_fancy_upsample jsimd_h2v2_fancy_upsample_12
#define jsimd_h2v2_merged_upsample jsimd_h2v2_merged_upsample_12
#define jsimd_h2v2_smooth_downsample jsimd_h2v2_smooth_downsample_12
#define jsimd_h2v2_upsample jsimd_h2v2_upsample_12
#define jsimd_huff_encode_one_block jsimd_huff_encode_one_block_12
#define jsimd_idct_12x12 jsimd_idct_12x12_12
#define jsimd_idct_2x2 jsimd_idct_2x2_12
#define jsimd_idct_4x4 jsimd_idct_4x4_12
#define jsimd_idct_6x6 jsimd_idct_6x6_12
#define jsimd_idct_float jsimd_idct_float_12
#define jsimd_idct_ifast jsimd_idct_ifast_12
#define jsimd_idct_islow jsimd_idct_islow_12
#define jsimd_int_upsample jsimd_int_upsample_12
#define jsimd_quantize jsimd_quantize_12
#define jsimd_quantize_float jsimd_quantize_float_12
#define jsimd_rgb_gray_convert jsimd_rgb_gray_convert_12
#define jsimd_rgb_ycc_convert jsimd_rgb_ycc_convert_12
#define jsimd_ycc_rgb565_convert jsimd_ycc_rgb565_convert_12
#define jsimd_ycc_rgb_convert jsimd_ycc_rgb_convert_12
#define jzero_far jzero_far_12
#define merged_1v_upsample merged_1v_upsample_12
#define merged_2v_upsample merged_2v_upsample_12
#define new_color_map_1_quant new_color_map_1_quant_12
#define new_color_map_2_quant new_color_map_2_quant_12
#define next_marker next_marker_12
#define noop_convert noop_convert_12
#define noop_quantize noop_quantize_12
#define noop_upsample noop_upsample_12
#define null_convert null_convert_12
#define null_convert null_convert_12
#define null_method null_method_12
#define output_message output_message_12
#define output_pass_setup output_pass_setup_12
#define pass2_fs_dither pass2_fs_dither_12
#define pass2_no_dither pass2_no_dither_12
#define pass_startup pass_startup_12
#define per_scan_setup per_scan_setup_12
#define post_process_1pass post_process_1pass_12
#define post_process_2pass post_process_2pass_12
#define post_process_prepass post_process_prepass_12
#define prepare_for_output_pass prepare_for_output_pass_12
#define prepare_for_pass prepare_for_pass_12
#define pre_process_data pre_process_data_12
#define prescan_quantize prescan_quantize_12
#define process_data_crank_post process_data_crank_post_12
#define process_data_simple_main process_data_simple_main_12
#define process_data_simple_main process_data_simple_main_12
#define quantize quantize_12
#define quantize3_ord_dither quantize3_ord_dither_12
#define quantize_float quantize_float_12
#define quantize_fs_dither quantize_fs_dither_12
#define quantize_ord_dither quantize_ord_dither_12
#define read_and_discard_scanlines read_and_discard_scanlines_12
#define read_markers read_markers_12
#define read_restart_marker read_restart_marker_12
#define realize_virt_arrays realize_virt_arrays_12
#define request_virt_barray request_virt_barray_12
#define request_virt_sarray request_virt_sarray_12
#define reset_error_mgr reset_error_mgr_12
#define reset_input_controller reset_input_controller_12
#define reset_marker_reader reset_marker_reader_12
#define rgb_gray_convert rgb_gray_convert_12
#define rgb_gray_convert rgb_gray_convert_12
#define rgb_rgb565_convert rgb_rgb565_convert_12
#define rgb_rgb565D_convert rgb_rgb565D_convert_12
#define rgb_rgb_convert rgb_rgb_convert_12
#define rgb_rgb_convert rgb_rgb_convert_12
#define rgb_ycc_convert rgb_ycc_convert_12
#define rgb_ycc_start rgb_ycc_start_12
#define save_marker save_marker_12
#define select_scan_parameters select_scan_parameters_12
#define self_destruct self_destruct_12
#define sep_downsample sep_downsample_12
#define sep_upsample sep_upsample_12
#define skip_input_data skip_input_data_12
#define skip_variable skip_variable_12
#define start_input_pass start_input_pass_12
#define start_input_pass start_input_pass_12
#define start_output_pass start_output_pass_12
#define start_pass start_pass_12
#define start_pass_1_quant start_pass_1_quant_12
#define start_pass_2_quant start_pass_2_quant_12
#define start_pass_coef start_pass_coef_12
#define start_pass_coef start_pass_coef_12
#define start_pass_dcolor start_pass_dcolor_12
#define start_pass_downsample start_pass_downsample_12
#define start_pass_dpost start_pass_dpost_12
#define start_pass_fdctmgr start_pass_fdctmgr_12
#define start_pass_huff start_pass_huff_12
#define start_pass_huff_decoder start_pass_huff_decoder_12
#define start_pass_main start_pass_main_12
#define start_pass_main start_pass_main_12
#define start_pass_merged_upsample start_pass_merged_upsample_12
#define start_pass_phuff start_pass_phuff_12
#define start_pass_phuff_decoder start_pass_phuff_decoder_12
#define start_pass_prep start_pass_prep_12
#define start_pass_upsample start_pass_upsample_12
#define term_destination term_destination_12
#define term_mem_destination term_mem_destination_12
#define term_source term_source_12
#define validate_script validate_script_12
#define write_file_header write_file_header_12
#define write_file_trailer write_file_trailer_12
#define write_frame_header write_frame_header_12
#define write_marker_byte write_marker_byte_12
#define write_marker_header write_marker_header_12
#define write_scan_header write_scan_header_12
#define write_tables_only write_tables_only_12
#define ycck_cmyk_convert ycck_cmyk_convert_12
#define ycc_rgb565_convert ycc_rgb565_convert_12
#define ycc_rgb565D_convert ycc_rgb565D_convert_12
#define ycc_rgb_convert ycc_rgb_convert_12
#define rgb_red rgb_red_12
#define c_scales c_scales_12
#define rgb_green rgb_green_12
#define rgb_blue rgb_blue_12
#define rgb_pixelsize rgb_pixelsize_12
#define rgb_red rgb_red_12
#define rgb_green rgb_green_12
#define rgb_blue rgb_blue_12
#define jpeg_nbits_table jpeg_nbits_table_12
#define std_luminance_quant_tbl std_luminance_quant_tbl_12
#define std_chrominance_quant_tbl std_chrominance_quant_tbl_12
#define jpeg_nbits_table jpeg_nbits_table_12
#define dither_matrix dither_matrix_12
#define rgb_pixelsize rgb_pixelsize_12
#define rgb_red rgb_red_12
#define rgb_green rgb_green_12
#define rgb_blue rgb_blue_12
#define rgb_pixelsize rgb_pixelsize_12
#define dither_matrix dither_matrix_12
#define base_dither_matrix base_dither_matrix_12
#define rgb_green rgb_green_12
#define rgb_red rgb_red_12
#define rgb_blue rgb_blue_12
#define extra_pool_slop extra_pool_slop_12
#define first_pool_slop first_pool_slop_12
#define jpeg_natural_order jpeg_natural_order_12
#define jpeg_std_message_table jpeg_std_message_table_12
/* End of section generated by rename_symbols_12.sh. */
#endif /* BITS_IN_JSAMPLE == 12 && SUFFIX_LIBJPEG12_SYMBOLS == 1 */

/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of Rec. ITU-T T.81 | ISO/IEC 10918-1, set this to 255.
 * However, darn few applications need more than 4 channels (maybe 5 for CMYK +
 * alpha mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10      /* maximum number of image components */


/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 */

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int)(value))

#define MAXJSAMPLE      255
#define CENTERJSAMPLE   128

#endif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int)(value))

#define MAXJSAMPLE      4095
#define CENTERJSAMPLE   2048

#endif /* BITS_IN_JSAMPLE == 12 */


/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;


/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)


/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */

/* UINT8 must hold at least the values 0..255. */

typedef unsigned char UINT8;

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H                   /* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values.
 *
 * NOTE: The INT32 typedef dates back to libjpeg v5 (1994.)  Integers were
 * sometimes 16-bit back then (MS-DOS), which is why INT32 is typedef'd to
 * long.  It also wasn't common (or at least as common) in 1994 for INT32 to be
 * defined by platform headers.  Since then, however, INT32 is defined in
 * several other common places:
 *
 * Xmd.h (X11 header) typedefs INT32 to int on 64-bit platforms and long on
 * 32-bit platforms (i.e always a 32-bit signed type.)
 *
 * basetsd.h (Win32 header) typedefs INT32 to int (always a 32-bit signed type
 * on modern platforms.)
 *
 * qglobal.h (Qt header) typedefs INT32 to int (always a 32-bit signed type on
 * modern platforms.)
 *
 * This is a recipe for conflict, since "long" and "int" aren't always
 * compatible types.  Since the definition of INT32 has technically been part
 * of the libjpeg API for more than 20 years, we can't remove it, but we do not
 * use it internally any longer.  We instead define a separate type (JLONG)
 * for internal use, which ensures that internal behavior will always be the
 * same regardless of any external headers that may be included.
 */

#ifndef XMD_H                   /* X11/xmd.h correctly defines INT32 */
#ifndef _BASETSD_H_             /* Microsoft defines it in basetsd.h */
#ifndef _BASETSD_H              /* MinGW is slightly different */
#ifndef QGLOBAL_H               /* Qt defines it in qglobal.h */
typedef long INT32;
#endif
#endif
#endif
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.  (Note that changing this datatype will
 * potentially require modifying the SIMD code.  The x86-64 SIMD extensions,
 * in particular, assume a 32-bit JDIMENSION.)
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */


/* These macros are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions;
 * in particular, you'll need to do that to make the library a Windows DLL.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

/* a function called through method pointers: */
#define METHODDEF(type)         static type
/* a function used only in its module: */
#define LOCAL(type)             static type
/* a function referenced thru EXTERNs: */
#define GLOBAL(type)            type
/* a reference to a GLOBAL function: */
#define EXTERN(type)            extern type


/* Originally, this macro was used as a way of defining function prototypes
 * for both modern compilers as well as older compilers that did not support
 * prototype parameters.  libjpeg-turbo has never supported these older,
 * non-ANSI compilers, but the macro is still included because there is some
 * software out there that uses it.
 */

#define JMETHOD(type, methodname, arglist)  type (*methodname) arglist


/* libjpeg-turbo no longer supports platforms that have far symbols (MS-DOS),
 * but again, some software relies on this macro.
 */

#undef FAR
#define FAR


/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

#ifndef HAVE_BOOLEAN
typedef int boolean;
#endif
#ifndef FALSE                   /* in case these macros already exist */
#define FALSE   0               /* values of boolean */
#endif
#ifndef TRUE
#define TRUE    1
#endif


/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS


/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED     /* accurate integer method */
#define DCT_IFAST_SUPPORTED     /* less accurate int method [legacy feature] */
#define DCT_FLOAT_SUPPORTED     /* floating-point method [legacy feature] */

/* Encoder capability options: */

#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define C_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
#define ENTROPY_OPT_SUPPORTED       /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 * The exact same statements apply for progressive JPEG: the default tables
 * don't work for progressive mode.  (This may get fixed, however.)
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define D_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
#define SAVE_MARKERS_SUPPORTED      /* jpeg_save_markers() needed? */
#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
#define IDCT_SCALING_SUPPORTED      /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED       /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED       /* 2-pass color quantization? */

/* more capability options later, no doubt */


/*
 * The RGB_RED, RGB_GREEN, RGB_BLUE, and RGB_PIXELSIZE macros are a vestigial
 * feature of libjpeg.  The idea was that, if an application developer needed
 * to compress from/decompress to a BGR/BGRX/RGBX/XBGR/XRGB buffer, they could
 * change these macros, rebuild libjpeg, and link their application statically
 * with it.  In reality, few people ever did this, because there were some
 * severe restrictions involved (cjpeg and djpeg no longer worked properly,
 * compressing/decompressing RGB JPEGs no longer worked properly, and the color
 * quantizer wouldn't work with pixel sizes other than 3.)  Furthermore, since
 * all of the O/S-supplied versions of libjpeg were built with the default
 * values of RGB_RED, RGB_GREEN, RGB_BLUE, and RGB_PIXELSIZE, many applications
 * have come to regard these values as immutable.
 *
 * The libjpeg-turbo colorspace extensions provide a much cleaner way of
 * compressing from/decompressing to buffers with arbitrary component orders
 * and pixel sizes.  Thus, we do not support changing the values of RGB_RED,
 * RGB_GREEN, RGB_BLUE, or RGB_PIXELSIZE.  In addition to the restrictions
 * listed above, changing these values will also break the SIMD extensions and
 * the regression tests.
 */

#define RGB_RED         0       /* Offset of Red in an RGB scanline element */
#define RGB_GREEN       1       /* Offset of Green */
#define RGB_BLUE        2       /* Offset of Blue */
#define RGB_PIXELSIZE   3       /* JSAMPLEs per RGB scanline element */

#define JPEG_NUMCS  17

#define EXT_RGB_RED         0
#define EXT_RGB_GREEN       1
#define EXT_RGB_BLUE        2
#define EXT_RGB_PIXELSIZE   3

#define EXT_RGBX_RED        0
#define EXT_RGBX_GREEN      1
#define EXT_RGBX_BLUE       2
#define EXT_RGBX_PIXELSIZE  4

#define EXT_BGR_RED         2
#define EXT_BGR_GREEN       1
#define EXT_BGR_BLUE        0
#define EXT_BGR_PIXELSIZE   3

#define EXT_BGRX_RED        2
#define EXT_BGRX_GREEN      1
#define EXT_BGRX_BLUE       0
#define EXT_BGRX_PIXELSIZE  4

#define EXT_XBGR_RED        3
#define EXT_XBGR_GREEN      2
#define EXT_XBGR_BLUE       1
#define EXT_XBGR_PIXELSIZE  4

#define EXT_XRGB_RED        1
#define EXT_XRGB_GREEN      2
#define EXT_XRGB_BLUE       3
#define EXT_XRGB_PIXELSIZE  4

static const int rgb_red[JPEG_NUMCS] = {
  -1, -1, RGB_RED, -1, -1, -1, EXT_RGB_RED, EXT_RGBX_RED,
  EXT_BGR_RED, EXT_BGRX_RED, EXT_XBGR_RED, EXT_XRGB_RED,
  EXT_RGBX_RED, EXT_BGRX_RED, EXT_XBGR_RED, EXT_XRGB_RED,
  -1
};

static const int rgb_green[JPEG_NUMCS] = {
  -1, -1, RGB_GREEN, -1, -1, -1, EXT_RGB_GREEN, EXT_RGBX_GREEN,
  EXT_BGR_GREEN, EXT_BGRX_GREEN, EXT_XBGR_GREEN, EXT_XRGB_GREEN,
  EXT_RGBX_GREEN, EXT_BGRX_GREEN, EXT_XBGR_GREEN, EXT_XRGB_GREEN,
  -1
};

static const int rgb_blue[JPEG_NUMCS] = {
  -1, -1, RGB_BLUE, -1, -1, -1, EXT_RGB_BLUE, EXT_RGBX_BLUE,
  EXT_BGR_BLUE, EXT_BGRX_BLUE, EXT_XBGR_BLUE, EXT_XRGB_BLUE,
  EXT_RGBX_BLUE, EXT_BGRX_BLUE, EXT_XBGR_BLUE, EXT_XRGB_BLUE,
  -1
};

static const int rgb_pixelsize[JPEG_NUMCS] = {
  -1, -1, RGB_PIXELSIZE, -1, -1, -1, EXT_RGB_PIXELSIZE, EXT_RGBX_PIXELSIZE,
  EXT_BGR_PIXELSIZE, EXT_BGRX_PIXELSIZE, EXT_XBGR_PIXELSIZE, EXT_XRGB_PIXELSIZE,
  EXT_RGBX_PIXELSIZE, EXT_BGRX_PIXELSIZE, EXT_XBGR_PIXELSIZE, EXT_XRGB_PIXELSIZE,
  -1
};

/* Definitions for speed-related optimizations. */

/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#ifndef MULTIPLIER
#ifndef WITH_SIMD
#define MULTIPLIER  int         /* type for fastest integer multiply */
#else
#define MULTIPLIER  short       /* prefer 16-bit with SIMD for parellelism */
#endif
#endif


/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 */

#ifndef FAST_FLOAT
#define FAST_FLOAT  float
#endif

#endif /* JPEG_INTERNAL_OPTIONS */
